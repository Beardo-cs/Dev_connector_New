{"ast":null,"code":"import React,{useEffect}from'react';import{connect}from'react-redux';import Spinner from'../layout/Spinner';import{getGithubRepos}from'../../actions/profile';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ProfileGithub=function ProfileGithub(_ref){var username=_ref.username,getGithubRepos=_ref.getGithubRepos,repos=_ref.repos;useEffect(function(){getGithubRepos(username);},[getGithubRepos]);return/*#__PURE__*/_jsxs(\"div\",{className:\"profile-github\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-primary my-1\",children:\" Github Repo \"}),repos===null?/*#__PURE__*/_jsx(Spinner,{}):repos.map(function(repo){return/*#__PURE__*/_jsxs(\"div\",{className:\"repo bg-white p-1 my-2\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h4\",{children:/*#__PURE__*/_jsx(\"a\",{href:repo.html_url,target:\"_black\",rel:\"noopener noreferrer\",children:repo.name})}),/*#__PURE__*/_jsx(\"p\",{children:repo.description})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsxs(\"li\",{className:\"badge badge-primary\",children:[\" Stars: \",repo.stargazers_count,\" \"]}),/*#__PURE__*/_jsxs(\"li\",{className:\"badge badge-dark\",children:[\" Watchers: \",repo.watchers_count,\" \"]}),/*#__PURE__*/_jsxs(\"li\",{className:\"badge badge-light\",children:[\" Forks: \",repo.forks_count,\" \"]})]})})]},repo._id);})]});};var mapStateToProps=function mapStateToProps(state){return{repos:state.profile.repos};};export default connect(mapStateToProps,{getGithubRepos:getGithubRepos})(ProfileGithub);","map":{"version":3,"sources":["/home/mahi/Downloads/social_media/client/src/components/profile/ProfileGithub.js"],"names":["React","useEffect","connect","Spinner","getGithubRepos","ProfileGithub","username","repos","map","repo","html_url","name","description","stargazers_count","watchers_count","forks_count","_id","mapStateToProps","state","profile"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAgC,OAAhC,CAEA,OAAQC,OAAR,KAAsB,aAAtB,CACA,MAAOC,CAAAA,OAAP,KAAoB,mBAApB,CACA,OAAQC,cAAR,KAA6B,uBAA7B,C,wFAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAAwC,IAArCC,CAAAA,QAAqC,MAArCA,QAAqC,CAA3BF,cAA2B,MAA3BA,cAA2B,CAAXG,KAAW,MAAXA,KAAW,CAC1DN,SAAS,CAAE,UAAK,CACZG,cAAc,CAAEE,QAAF,CAAd,CACH,CAFQ,CAEN,CAACF,cAAD,CAFM,CAAT,CAIA,mBACA,aAAK,SAAS,CAAE,gBAAhB,wBACI,WAAI,SAAS,CAAE,mBAAf,2BADJ,CAEKG,KAAK,GAAK,IAAV,cAAiB,KAAC,OAAD,IAAjB,CACGA,KAAK,CAACC,GAAN,CAAU,SAAAC,IAAI,qBACV,aAAoB,SAAS,CAAE,wBAA/B,wBACI,oCACI,iCACI,UAAG,IAAI,CAAIA,IAAI,CAACC,QAAhB,CACA,MAAM,CAAC,QADP,CAEA,GAAG,CAAC,qBAFJ,UAICD,IAAI,CAACE,IAJN,EADJ,EADJ,cASI,mBAAIF,IAAI,CAACG,WAAT,EATJ,GADJ,cAYI,kCACI,mCACA,YAAI,SAAS,CAAC,qBAAd,sBAA6CH,IAAI,CAACI,gBAAlD,OADA,cAEA,YAAI,SAAS,CAAC,kBAAd,yBAA6CJ,IAAI,CAACK,cAAlD,OAFA,cAGA,YAAI,SAAS,CAAC,mBAAd,sBAA2CL,IAAI,CAACM,WAAhD,OAHA,GADJ,EAZJ,GAAUN,IAAI,CAACO,GAAf,CADU,EAAd,CAHR,GADA,CA6BH,CAlCD,CA2CA,GAAMC,CAAAA,eAAe,CAAE,QAAjBA,CAAAA,eAAiB,CAAAC,KAAK,QAAK,CAC7BX,KAAK,CAAEW,KAAK,CAACC,OAAN,CAAcZ,KADQ,CAAL,EAA5B,CAIA,cAAeL,CAAAA,OAAO,CAAEe,eAAF,CAAmB,CAACb,cAAc,CAAdA,cAAD,CAAnB,CAAP,CAA8CC,aAA9C,CAAf","sourcesContent":["import React , {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport {getGithubRepos} from '../../actions/profile';\n\nconst ProfileGithub = ({ username, getGithubRepos, repos}) => {\n    useEffect (()=> {\n        getGithubRepos (username);\n    }, [getGithubRepos]);\n\n    return (\n    <div className =\"profile-github\">\n        <h2 className ='text-primary my-1'> Github Repo </h2>\n        {repos === null ? <Spinner /> : (\n            repos.map(repo => (\n                <div key={repo._id} className ='repo bg-white p-1 my-2'>\n                    <div>\n                        <h4>\n                            <a href = {repo.html_url} \n                            target='_black' \n                            rel='noopener noreferrer'\n                            >\n                            {repo.name}\n                            </a>\n                        </h4>\n                        <p>{repo.description}</p>\n                    </div>  \n                    <div>\n                        <ul>\n                        <li className=\"badge badge-primary\"> Stars: {repo.stargazers_count} </li>\n                        <li className=\"badge badge-dark\"> Watchers: {repo.watchers_count} </li>\n                        <li className=\"badge badge-light\"> Forks: {repo.forks_count} </li>\n                        </ul>\n                    </div>\n                    </div>\n                ))\n             )}\n    </div>\n    );\n};\n\nProfileGithub.propTypes = {\n    getGithubRepos: PropTypes.func.isRequired,\n    repos: PropTypes.array.isRequired,\n    username: PropTypes.string.isRequired\n\n};\n\nconst mapStateToProps =state => ({\n    repos: state.profile.repos\n});\n\nexport default connect (mapStateToProps, {getGithubRepos }) (ProfileGithub);"]},"metadata":{},"sourceType":"module"}